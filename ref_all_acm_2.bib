% This file was created with JabRef 2.9.
% Encoding: UTF8

@ARTICLE{Anewalt:2012:EAP:2038772.2038781,
  author = {Anewalt, Karen},
  title = {Exploring agile processes},
  journal = {J. Comput. Sci. Coll.},
  year = {2012},
  volume = {27},
  pages = {29--29},
  number = {3},
  month = jan,
  abstract = {Agile software processes are becoming more pervasive in industry settings;
	however these same processes have not been widely adopted in academic
	settings. A common thread among agile software processes is the iterative
	approach to the software lifecycle. It can be challenging to integrate
	a pure agile process in a typical software projects course due to
	the time constraints of a semester, but integrating elements of the
	agile approach can be useful from both an instructor and student
	perspective.
	
	This tutorial will introduce the participants to the key principles
	of the agile software process which proclaims to value:
	
	- Individuals and interactions over processes and tools.
	
	- Working software over comprehensive documentation.
	
	- Customer collaboration over contract negotiation.
	
	- Responding to change over following a plan.
	
	There are many flavors of agile processes and this tutorial will focus
	the Scrum model. Examples of how Scrum can be used to organize a
	classroom software development project will be discussed. Several
	open source tools that can be useful in supporting agile software
	projects from the requirements gathering phase through development
	and testing will be demonstrated.
	
	Participants will engage in a participatory game to illustrate some
	of the main components of the agile software process model. Attendees
	will leave this tutorial with ideas for integrating agile approaches
	into their own software projects courses.},
  acmid = {2038781},
  address = {USA},
  db = {acm2},
  issn = {1937-4771},
  issue_date = {January 2012},
  numpages = {1},
  publisher = {Consortium for Computing Sciences in Colleges},
  url = {http://dl.acm.org/citation.cfm?id=2038772.2038781}
}

@INPROCEEDINGS{Barbosa:2012:SCI:2415308.2415309,
  author = {Barbosa, Luis Soares},
  title = {Software components as invariant-typed arrows},
  booktitle = {Proceedings of the 16th Brazilian conference on Programming Languages},
  year = {2012},
  series = {SBLP'12},
  pages = {1--5},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  abstract = {Invariants are constraints on software components which restrict their
	behavior in some desirable way, but whose maintenance entails some
	kind of proof obligation discharge. Such constraints may act not
	only over the input and output domains, as in a purely functional
	setting, but also over the underlying state space, as in the case
	of reactive components. This talk introduces an approach for reasoning
	about invariants which is both compositional and calculational: compositional
	because it is based on rules which break the complexity of such proof
	obligations across the structures involved; calculational because
	such rules are derived thanks to an algebra of invariants encoded
	in the language of binary relations. A main tool of this approach
	is the pointfree transform of the predicate calculus, which opens
	the possibility of changing the underlying mathematical space so
	as to enable agile algebraic calculation. The development of a theory
	of invariant preservation requires a broad, but uniform view of computational
	processes embodied in software components able to take into account
	data persistence and continued interaction. Such is the plan for
	this talk: we first introduce such processes as arrows, and then
	invariants as their types.},
  acmid = {2415309},
  db = {acm2},
  doi = {10.1007/978-3-642-33182-4_1},
  isbn = {978-3-642-33181-7},
  location = {Natal, Brazil},
  numpages = {5},
  url = {http://dx.doi.org/10.1007/978-3-642-33182-4_1}
}

@INPROCEEDINGS{Brown:2013:ASE:2486788.2486907,
  author = {Brown, Alan W. and Ambler, Scott and Royce, Walker},
  title = {Agility at scale: economic governance, measured improvement, and
	disciplined delivery},
  booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
  year = {2013},
  series = {ICSE '13},
  pages = {873--881},
  address = {Piscataway, NJ, USA},
  publisher = {IEEE Press},
  abstract = {Agility without discipline cannot scale, and discipline without agility
	cannot compete. Agile methods are now mainstream. Software enterprises
	are adopting these practices in broad, comprehensive delivery contexts.
	There have been many successes, and there have been disappointments.
	IBMs framework for achieving agility at scale is based on hundreds
	of successful deployments and dozens of disappointing experiences
	in accelerating software delivery cycles within large-scale organizations.
	Our collective know-how points to three key principles to deliver
	measured improvements in agility with high confidence: Steer using
	economic governance, measure incremental improvements honestly, and
	empower teams with disciplined agile delivery This paper elaborates
	these three principles and presents practical recommendations for
	achieving improved agility in large-scale software delivery enterprises.
	},
  acmid = {2486907},
  db = {acm2},
  isbn = {978-1-4673-3076-3},
  location = {San Francisco, CA, USA},
  numpages = {9},
  url = {http://dl.acm.org/citation.cfm?id=2486788.2486907}
}

@INPROCEEDINGS{Bruegge:2012:TTC:2425936.2425938,
  author = {Bruegge, Bernd and Krusche, Stephan and Wagner, Martin},
  title = {Teaching Tornado: from communication models to releases},
  booktitle = {Proceedings of the 8th edition of the Educators' Symposium},
  year = {2012},
  series = {EduSymp '12},
  pages = {5--12},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {In this paper we describe Tornado, which we teach in our software
	engineering project courses. Tornado is a new process model that
	combines the Unified Process with Scrum elements.
	
	The Tornado model focuses on scenario-based design starting with visionary
	scenarios funneling down to demo scenarios. Tornado offers models
	for a broad range of activities. In addition to formal models used
	for analysis and design, Tornado encourages the developer to use
	informal models as communication medium for the interaction with
	the customer and end user. These communication models can be used
	as the basis of early releases to increase the feedback from customer
	to developer. We argue that the combination of informal modeling
	and release management can be introduced early in software engineering
	project courses.
	
	We describe a case study in which we demonstrate the use of communication
	models and release management in a multi-customer course with 80
	students. In three months, the students produced 163 releases for
	11 customers.},
  acmid = {2425938},
  db = {acm2},
  doi = {10.1145/2425936.2425938},
  isbn = {978-1-4503-1812-9},
  keywords = {Scrum, agile techniques, continuous integration, executable prototypes,
	extreme programming, informal modeling, project courses, prototyping,
	release management, scenario-based design, software engineering education,
	unified process},
  location = {Innsbruck, Austria},
  numpages = {8},
  url = {http://doi.acm.org/10.1145/2425936.2425938}
}

@INPROCEEDINGS{Feiner:2012:URU:2414179.2414208,
  author = {Feiner, Johannes and Andrews, Keith},
  title = {Usability reporting with UsabML},
  booktitle = {Proceedings of the 4th international conference on Human-Centered
	Software Engineering},
  year = {2012},
  series = {HCSE'12},
  pages = {342--351},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  abstract = {Usability practitioners conduct formative evaluations, such as heuristic
	evaluations and thinking aloud tests, to identify potential problems
	in a user interface as part of the iterative design cycle. The findings
	of a formative evaluation (in essence, a list of potential problems)
	are usually compiled into written reports and typically delivered
	as a PDF or Word document. A written report is convenient for reading,
	but makes it difficult to reuse the findings electronically. The
	usability markup language (UsabML) defines a structured reporting
	format for the results of usability evaluations. In agile software
	development the direct handover of usability findings to software
	engineers can speed up development cycles and improve software quality.
	
	Usability managers can now enter the findings of formative evaluations
	into a new, web-based system called Usability Reporting Manager (URM).
	Findings can be exported in UsabML format, which in turn can easily
	be imported by software engineers into an issue-tracking system connected
	to a source code repository. UsabML can also be transformed into
	other formats such as HTML and PDF via stylesheets (XSL).},
  acmid = {2414208},
  db = {acm2},
  doi = {10.1007/978-3-642-34347-6_26},
  isbn = {978-3-642-34346-9},
  keywords = {XML, exchange, formative evaluation, reporting format, usability findings},
  location = {Toulouse, France},
  numpages = {10},
  url = {http://dx.doi.org/10.1007/978-3-642-34347-6_26}
}

@INPROCEEDINGS{Gao:2013:DCC:2479871.2479924,
  author = {Gao, Yuqing},
  title = {Data centric computing for internet scale enterprises},
  booktitle = {Proceedings of the 4th ACM/SPEC International Conference on Performance
	Engineering},
  year = {2013},
  series = {ICPE '13},
  pages = {347--348},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {In the era of exploding internet usage, social and mobile, enterprises
	are facing both the challenges and business opportunities that are
	introduced by Big Data, which has the characteristics of high volume,
	high velocity, and high variety. Big Data and the emergence of Internet-facing
	workloads will blur the separation between traditional transactional
	and analytics workloads. To extract business value and make actionable
	insight from the unprecedented volume of the data with the agility
	required from the business, it requires transformational innovations
	from many fronts. For example, in data management layer, how unstructured
	data is stored and retrieved efficiently, how data-intensive analytic
	computation can be done on commercial systems effectively, how the
	distributed cache should be designed to make use of the latest network
	protocols so the network-connected memory data can be accessed remotely
	and seamlessly. Moreover, the trend also motivates many architectural
	and technological advancement, such as moving from a transaction-centric
	to a data-centric architecture that supports extreme low and predicable
	latency, massive scale-out, high concurrency, and real-time situational
	awareness and analytics, and that requires orders of magnitude improvement
	over existing systems across each of these characteristics. At the
	same time, new applications in the Mobile and social space leverage
	new open source software stacks written in multiple programming languages,
	e.g., Java, JavaScript, Ruby, PHP, where the developer chooses the
	best tool for the job. How a polyglot runtime platform can be built
	that serves as a best practice platform for the programmers' community
	and in the meantime, optimized for enterprises with elastic, lightweight,
	resilient, agile runtime for business computing. Last, but not least,
	how the benchmarks should be enriched to measure the new runtimes,
	new data-centric systems and architectures.
	
	In this talk, I will talk about some of the research activities at
	IBM Research that addresses these challenges. We examined several
	enterprise-grade java workloads running on commercial multicore systems
	for massive parallelization, identified lock contentions and worked
	towards a streamlined methodology for lock-contention analysis of
	Java workloads. I will use this to describe the excitement around
	node.js framework. I will also talk about our design of data centric
	computing systems, particularly, in the area of data access latency,
	data ingestion, and massive scale-out distributed caching in the
	exemplary context of an eCommerce application. I will describe the
	architecture of a global secondary index to greatly improve data
	access latency of Hadoop Database (HBase), an open-source key-value
	distributed datastore. I will describe an innovative distributed
	caching system that exploits low latency interconnects to utilize
	hash maps of data keys on each server for local lookup while data
	resides and are accessed across clustered systems. The distributed
	cache can achieves 100 to 1000-fold performance gain over many caching
	methods. Last, I will talk about our early activities in developing
	technologies for an elastic, scalable, resilient polyglot runtime
	system. I will conclude with my views on the challenges for benchmarking
	community for next decade.},
  acmid = {2479924},
  db = {acm2},
  doi = {10.1145/2479871.2479924},
  isbn = {978-1-4503-1636-1},
  keywords = {data centric computing, internet scale},
  location = {Prague, Czech Republic},
  numpages = {2},
  url = {http://doi.acm.org/10.1145/2479871.2479924}
}

@INPROCEEDINGS{Jia:2012:UUT:2414179.2414207,
  author = {Jia, Yuan and Larusdottir, Marta Kristin and Cajander, \AAsa},
  title = {The usage of usability techniques in scrum projects},
  booktitle = {Proceedings of the 4th international conference on Human-Centered
	Software Engineering},
  year = {2012},
  series = {HCSE'12},
  pages = {331--341},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  abstract = {Over the past decades, usability techniques have been introduced into
	software development practices. At the same time many software development
	teams have started to use the agile development process --- Scrum
	--- to plan and organize their software projects. The focus of this
	study is to explore how usability techniques are integrated during
	software development in Scrum projects. The most commonly used usability
	technique in Scrum projects is workshops, followed by lo-fi prototyping,
	interviews and meetings with users, all used by more than half of
	the participants. The technique that is most frequently used is lo-fi
	prototyping used by more than half of the participants two to four
	times a month. All these usability techniques are informal, meaning
	that these techniques can be used quickly without much preparation.
	Formal usability evaluation with users is a highly ranked technique
	by the participants but not commonly used by them.},
  acmid = {2414207},
  db = {acm2},
  doi = {10.1007/978-3-642-34347-6_25},
  isbn = {978-3-642-34346-9},
  keywords = {agile software development, scrum, usability, usability techniques,
	user centred design, user involvement},
  location = {Toulouse, France},
  numpages = {11},
  url = {http://dx.doi.org/10.1007/978-3-642-34347-6_25}
}

@INPROCEEDINGS{Kuhrmann:2013:SSP:2486046.2486077,
  author = {Kuhrmann, Marco and Fern\'{a}ndez, Daniel M{\'e}ndez and Steenweg,
	Ragna},
  title = {Systematic software process development: where do we stand today?},
  booktitle = {Proceedings of the 2013 International Conference on Software and
	System Process},
  year = {2013},
  series = {ICSSP 2013},
  pages = {166--170},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {A software process metamodel (SPMM) defines a language to describe
	concrete software processes in a structured manner. Although agile
	methods gained much attention in recent years, we still need to provide
	process engineers with adequate tools to design, implement, publish
	and deploy, and manage comprehensive software processes. In response
	to this need, several SPMMs have been developed. It remains, however,
	unclear, which of those SPMMs are disseminated to which extent. In
	this paper, we contribute first results of a study on the state-of-the-art
	in the systematic development of software processes using standardized
	SPMMs and their corresponding infrastructure. Our results show that
	only a few documented standards exist and, furthermore, that among
	those standards only two are disseminated into practice. We focus
	on those standardized SPMMs, show their process ecosystem, and sketch
	a first picture on the state-of-the-art in SPMM-based software process
	develop- ment in order to foster discussions on further problem-driven
	research. },
  acmid = {2486077},
  db = {acm2},
  doi = {10.1145/2486046.2486077},
  isbn = {978-1-4503-2062-7},
  keywords = {Software process metamodels, literature review, study},
  location = {San Francisco, CA, USA},
  numpages = {5},
  url = {http://doi.acm.org/10.1145/2486046.2486077}
}

@INPROCEEDINGS{Kuusinen:2012:AUE:2414179.2414187,
  author = {Kuusinen, Kati and Mikkonen, Tommi and Pakarinen, Santtu},
  title = {Agile user experience development in a large software organization:
	good expertise but limited impact},
  booktitle = {Proceedings of the 4th international conference on Human-Centered
	Software Engineering},
  year = {2012},
  series = {HCSE'12},
  pages = {94--111},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  abstract = {While Agile methods were originally introduced for small, tightly
	coupled teams, leaner ways of working are becoming a practical method
	to run entire enterprises. As the emphasis of user experience work
	has inherently been on the early phases before starting the development,
	it also needs to be adapted to the Agile way of working. To improve
	the current practices in Agile user experience work, we determined
	the present state of a multi-continental software development organization
	that already had a functioning user experience team. In this paper,
	we describe the most prevalent issues regarding the interaction of
	user experience design and software development activities, and suggest
	improvements to fix those. Most of the observed problems were related
	to communication issues and to the service mode of the user experience
	team. The user experience team was operating between management and
	development organizations trying to adapt to the dissimilar practices
	of both the disciplines.},
  acmid = {2414187},
  db = {acm2},
  doi = {10.1007/978-3-642-34347-6_6},
  isbn = {978-3-642-34346-9},
  keywords = {agile development, human-centered design (HCD), human-computer interaction
	(HCI), user experience (UX)},
  location = {Toulouse, France},
  numpages = {18},
  url = {http://dx.doi.org/10.1007/978-3-642-34347-6_6}
}

@INPROCEEDINGS{McNely:2012:AEA:2379057.2379076,
  author = {McNely, Brian J. and Gestwicki, Paul and Burke, Ann and Gelms, Bridget},
  title = {Articulating everyday actions: an activity theoretical approach to
	scrum},
  booktitle = {Proceedings of the 30th ACM international conference on Design of
	communication},
  year = {2012},
  series = {SIGDOC '12},
  pages = {95--104},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {In this paper, we detail findings about the use of Scrum--a widely
	adopted agile software development framework--among a student game
	development team. Looking closely at six weeks of Scrum practices
	from a larger fifteen-week ethnography, we describe how Scrum strongly
	mediates everyday actions for the thirteen participants we studied.
	In analyzing our data, we deployed activity theory in concert with
	genre theory to better understand how participants repeatedly articulated
	and coarticulated finite, goal-directed, individual actions in the
	service of a broader, ongoing, shared objective. We offer, therefore,
	a way of understanding the Scrum process framework as a powerful
	orienting genre that facilitates collective development practice
	by stabilizing and intermediating a host of related, dynamic genres
	and artifacts.},
  acmid = {2379076},
  db = {acm2},
  doi = {10.1145/2379057.2379076},
  isbn = {978-1-4503-1497-8},
  keywords = {activity theory, mediation, orienting genres, scrum, writing},
  location = {Seattle, Washington, USA},
  numpages = {10},
  url = {http://doi.acm.org/10.1145/2379057.2379076}
}

@INPROCEEDINGS{Nielsen:2012:UEF:2399016.2399057,
  author = {Nielsen, Lene and Madsen, Sabine},
  title = {The usability expert's fear of agility: an empirical study of global
	trends and emerging practices},
  booktitle = {Proceedings of the 7th Nordic Conference on Human-Computer Interaction:
	Making Sense Through Design},
  year = {2012},
  series = {NordiCHI '12},
  pages = {261--264},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {This paper contributes to the HCI literature on usability practice
	with insights about the empirical challenges and global emerging
	practices caused by the advent of agile software development (ASD).
	In the paper we report from a worldwide study involving 12 usability
	professionals from 12 different countries. The findings show that
	the usability professionals share a forced development and innovation
	in their practice that stem from their clients' adoption and use
	of ASD methods. The ASD methods challenge the way usability testing
	is performed, the abilities of the usability expert, the usability
	deliverables, and the experts' assumptions about the importance of
	validity.},
  acmid = {2399057},
  db = {acm2},
  doi = {10.1145/2399016.2399057},
  isbn = {978-1-4503-1482-4},
  keywords = {agile methods, global trends, practice study, usability, usability
	practice, usability practitioners, usability professionals, usability
	testing},
  location = {Copenhagen, Denmark},
  numpages = {4},
  url = {http://doi.acm.org/10.1145/2399016.2399057}
}

@INPROCEEDINGS{Northrop:2012:ISP:2364412.2364465,
  author = {Northrop, Linda M. and Jones, Lawrence G.},
  title = {Introduction to software product lines adoption},
  booktitle = {Proceedings of the 16th International Software Product Line Conference
	- Volume 2},
  year = {2012},
  series = {SPLC '12},
  pages = {270--270},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {The tremendous benefits of taking a software product line approach
	are well documented. Organizations have achieved significant reductions
	in cost and time to market and, at the same time, increased the quality
	of families of their software systems. However, there are still considerable
	barriers to organizational adoption of product line practices. If
	an organization is sold on the concept, how is it to proceed? Most
	organizations are today doing incremental development. So, phased
	adoption simply makes sense. It is attractive as a risk reduction
	and fiscally viable proposition. This tutorial describes a phased,
	pattern-based approach to software product line adoption. The tutorial
	begins with a discussion of software product line adoption issues
	and then presents the Adoption Factory pattern. The Adoption Factory
	pattern provides a roadmap for phased, product line adoption. The
	tutorial covers the Adoption Factory in detail, including focus areas,
	phases, subpatterns, related practice areas, outputs, and roles.
	Examples of product line adoption plans following the pattern are
	used to illustrate its utility. The tutorial also describes common
	pitfalls and strategies for creating synergy within an organization
	between product line adoption and ongoing agile, CMMI or architecture-centric
	activities.},
  acmid = {2364465},
  db = {acm2},
  doi = {10.1145/2364412.2364465},
  isbn = {978-1-4503-1095-6},
  keywords = {software product line adoption, software product line adoption planning,
	software product lines},
  location = {Salvador, Brazil},
  numpages = {1},
  url = {http://doi.acm.org/10.1145/2364412.2364465}
}

@INPROCEEDINGS{Passos:2012:CAE:2372251.2372255,
  author = {Passos, Carol and Cruzes, Daniela S. and Dyb{\aa}, Tore and Mendon\c{c}a,
	Manoel},
  title = {Challenges of applying ethnography to study software practices},
  booktitle = {Proceedings of the ACM-IEEE international symposium on Empirical
	software engineering and measurement},
  year = {2012},
  series = {ESEM '12},
  pages = {9--18},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Ethnography is about the adoption of a cultural lens to observe and
	interpret events, actions, and behaviors, ensuring that they are
	placed in a relevant and meaningful context. Using this approach,
	it is possible to capture and analyze software development practices.
	Our aims are to illustrate the use of an ethnographic approach in
	a case study of agile software development adoption, to discuss the
	methodological challenges involved, and to provide support to others
	who conduct ethnographic studies of software practice. An ethnographic
	case study was conducted, employing participant observation, interviews,
	and document analysis. Difficulties and decisions were recorded and
	compared with those encountered in the literature. Finally, key challenges
	and guidelines to tackle them were discussed and documented. We identified
	five key challenges of applying ethnography to the study of software
	practices: (a) working in collaboration with and having something
	to offer to the participating company; (b) the insider/outsider dynamic
	of participant observation; (c) the balance between participant listening
	and participant observation; (d) the researcher's relationship with
	the participants; and (e) the rigor in qualitative work that involves
	the dilemma of the contextualization to be sufficiently broad and
	detailed. This study shows that ethnographic methods are indispensible
	when trying to understand software practice, and that the fundamental
	challenge for the researcher is to balance the role of participant
	observer with rigorous fieldwork.},
  acmid = {2372255},
  db = {acm2},
  doi = {10.1145/2372251.2372255},
  isbn = {978-1-4503-1056-7},
  keywords = {collaborative ethnographic research, participant observation, qualitative
	methods},
  location = {Lund, Sweden},
  numpages = {10},
  url = {http://doi.acm.org/10.1145/2372251.2372255}
}

@INPROCEEDINGS{Prior:2013:UAB:2466110.2466210,
  author = {Prior, Suzanne and Waller, Annalu and Black, Rolf and Kroll, Thilo},
  title = {Use of an agile bridge in the development of assistive technology},
  booktitle = {Proceedings of the 2013 ACM annual conference on Human factors in
	computing systems},
  year = {2013},
  series = {CHI '13},
  pages = {1579--1588},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Engaging with end users in the development of assistive technologies
	remains one of the major challenges for researchers and developers
	in the field of accessibility and HCI. Developing usable software
	systems for people with complex disabilities is problematic, software
	developers are wary of using user-centred design, one of the main
	methods by which usability can be improved, due to concerns about
	how best to work with adults with complex disabilities, in particular
	Severe Speech and Physical Impairments (SSPI) and how to involve
	them in research. This paper reports on how the adoption of an adapted
	agile approach involving the incorporation of a user advocate on
	the research team helped in meeting this challenge in one software
	project and offers suggestions for how this could be used by other
	development teams.},
  acmid = {2466210},
  db = {acm2},
  doi = {10.1145/2466110.2466210},
  isbn = {978-1-4503-1899-0},
  keywords = {agile methodology, assistive technology, severe speech and physical
	impairments, user centred design},
  location = {Paris, France},
  numpages = {10},
  url = {http://doi.acm.org/10.1145/2466110.2466210}
}

@INPROCEEDINGS{Reichlmayr:2012:SS:2157136.2157328,
  author = {Reichlmayr, Tom},
  title = {Student scrums (abstract only)},
  booktitle = {Proceedings of the 43rd ACM technical symposium on Computer Science
	Education},
  year = {2012},
  series = {SIGCSE '12},
  pages = {661--661},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Over the past ten years Agile software development practices have
	grown in acceptance and have gained a solid foothold in commercial
	software development. Our students are entering the workforce with
	an increasing percentage of companies that are using Agile processes
	and practices in the development of their products and services.
	The most widely used Agile project management framework is Scrum.
	Scrum has a well defined approach for organizing and controlling
	a software development project. It is almost always implemented in
	combination with Agile software development practices, but is flexible
	enough to even be used for managing non-software projects. Selecting
	Scrum as the framework for student team projects has the advantage
	of introducing software process at a level of ceremony that both
	captures foundational software engineering practices and is manageable
	within the constraints of a class or capstone project. This workshop
	will introduce participants to the components of the Scrum framework
	with activities designed to demonstrate the flexibility of Scrum
	to support a diverse set of course learning outcomes at all levels
	of the curriculum. Laptop optional},
  acmid = {2157328},
  db = {acm2},
  doi = {10.1145/2157136.2157328},
  isbn = {978-1-4503-1098-7},
  keywords = {acceptance testing, agile software development, estimation, project
	planning, scrum, teams, tracking, user stories},
  location = {Raleigh, North Carolina, USA},
  numpages = {1},
  url = {http://doi.acm.org/10.1145/2157136.2157328}
}

@INPROCEEDINGS{Rodriguez:2012:SAL:2372251.2372275,
  author = {Rodríguez, Pilar and Markkula, Jouni and Oivo, Markku and Turula,
	Kimmo},
  title = {Survey on agile and lean usage in finnish software industry},
  booktitle = {Proceedings of the ACM-IEEE international symposium on Empirical
	software engineering and measurement},
  year = {2012},
  series = {ESEM '12},
  pages = {139--148},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Earlier empirical studies have demonstrated the interest that agile
	methods have generated in the software industry. Currently, lean
	approaches are increasingly adopted for complementing agile methods
	in software processes. With the goal of providing up-to-day results
	that can be used by organizations implementing or planning to implement
	agile and/or lean methods, we have conducted a study on the current
	stage of agile and lean adoption and usage in the software industry.
	For this purpose, we conducted an extensive survey among Finnish
	software practitioners in 2011, using the membership registry of
	The Finnish Information Processing Association (FIPA) as a sampling
	frame. 408 responses were collected from 200 software intensive organizations
	in the study. The survey included questions for identifying the rate
	of agile and lean usage in software organizations as well as the
	implementation of specific methods and practices, goals in adopting
	agile and lean, reasons for not applying these methods and effects
	of the agile and lean usage. The results of the survey reveal that
	a majority of respondents' organizational units are using agile and/or
	lean methods (58%). Furthermore, lean appears as a new player, being
	used by 24% of respondents, mainly in combination with agile (21%).
	The reasons and benefits for using agile and lean methods appeared
	to correspond in most parts to the findings of the earlier research.
	Generally, the experiences of using agile and lean methods seem to
	be rather positive, although challenges, such as obtaining management
	support and limitations for scaling agile in distributed settings,
	were also identified.},
  acmid = {2372275},
  db = {acm2},
  doi = {10.1145/2372251.2372275},
  isbn = {978-1-4503-1056-7},
  keywords = {agile, lean, survey},
  location = {Lund, Sweden},
  numpages = {10},
  url = {http://doi.acm.org/10.1145/2372251.2372275}
}

@INPROCEEDINGS{Rodriguez:2013:BLT:2486046.2486064,
  author = {Rodríguez, Pilar and Mikkonen, Kirsi and Kuvaja, Pasi and Oivo, Markku
	and Garbajosa, Juan},
  title = {Building lean thinking in a telecom software development organization:
	strengths and challenges},
  booktitle = {Proceedings of the 2013 International Conference on Software and
	System Process},
  year = {2013},
  series = {ICSSP 2013},
  pages = {98--107},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {The potential shown by Lean in different domains has aroused interest
	in the software industry. However, it remains unclear how Lean can
	be effectively applied in a domain such as software development that
	is fundamentally different from manufacturing. This study explores
	how Lean principles are implemented in software development companies
	and the challenges that arise when applying Lean Software Development.
	For that, a case study was conducted at Ericsson R&D Finland, which
	successfully adopted Scrum in 2009 and subsequently started a comprehensible
	transition to Lean in 2010. Focus groups were conducted with company
	representatives to help devise a questionnaire supporting the creation
	of a Lean mindset in the company (Team Amplifier). Afterwards, the
	questionnaire was used in 16 teams based in Finland, Hungary and
	China to evaluate the status of the transformation. By using Lean
	thinking, Ericsson R&D Finland has made important improvements to
	the quality of its products, customer satisfaction and transparency
	within the organization. Moreover, build times have been reduced
	over ten times and the number of commits per day has increased roughly
	five times.The study makes two main contributions to research. First,
	the main factors that have enabled Ericsson R&D’s achievements are
	analysed. Elements such as ‘network of product owners’, ‘continuous
	integration’, ‘work in progress limits’ and ‘communities of practice’
	have been identified as being of fundamental importance. Second,
	three categories of challenges in using Lean Software Development
	were identified: ‘achieving flow’, ‘transparency’ and ‘creating a
	learning culture’. },
  acmid = {2486064},
  db = {acm2},
  doi = {10.1145/2486046.2486064},
  isbn = {978-1-4503-2062-7},
  keywords = {Agile software development, le-agile, lean software development, method
	adoption, process improvement, process introduction},
  location = {San Francisco, CA, USA},
  numpages = {10},
  url = {http://doi.acm.org/10.1145/2486046.2486064}
}

@INPROCEEDINGS{Senapathi:2013:SAU:2460999.2461016,
  author = {Senapathi, Mali and Srinivasan, Ananth},
  title = {Sustained agile usage: a systematic literature review},
  booktitle = {Proceedings of the 17th International Conference on Evaluation and
	Assessment in Software Engineering},
  year = {2013},
  series = {EASE '13},
  pages = {119--124},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Context: Agile methodologies (AM) emerged as a popular alternative
	to formalized methods, and have gained widespread acceptance in both
	the academic and industrial contexts. While most research has focused
	on their early stages of adoption and use, there is little evidence
	that agile methodologies have been effectively used beyond the adoption
	stage. Objective: The objective of this paper is to gain a comprehensive
	understanding of the various factors that impact the sustained usage
	of agile methods. Method: We performed a systematic literature review
	to identify empirical studies relating to agile usage. We followed
	the guidelines provided for conducting systematic literature reviews
	in software engineering [<u>1, 2</u>] using the following distinct
	stages: 1) protocol development and the search strategy, 2) exclusion
	process, 3) data extraction, and 4) data synthesis. Results: Our
	review identified nine critical factors viz., Management Support,
	Attitude, Motivation, Team Composition, Training, Agile Mindset,
	Technical Competence and Expertise, Agile Engineering Practices,
	and Methodology Champion. Conclusions: Our review highlights the
	significance of nine critical factors that impact sustained usage
	of AM in organizations. Our findings also indicate that the right
	balance and combination of various factors with an emphasis on continuous
	improvement will be crucial for achieving true agile sustainability
	in organizations.},
  acmid = {2461016},
  db = {acm2},
  doi = {10.1145/2460999.2461016},
  isbn = {978-1-4503-1848-8},
  keywords = {agile usage, critical factors, sustained agile usage},
  location = {Porto de Galinhas, Brazil},
  numpages = {6},
  url = {http://doi.acm.org/10.1145/2460999.2461016}
}

@INPROCEEDINGS{Soeken:2012:ABD:2366988.2367007,
  author = {Soeken, Mathias and Wille, Robert and Drechsler, Rolf},
  title = {Assisted behavior driven development using natural language processing},
  booktitle = {Proceedings of the 50th international conference on Objects, Models,
	Components, Patterns},
  year = {2012},
  series = {TOOLS'12},
  pages = {269--287},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  abstract = {In Behavior Driven Development (BDD), acceptance tests provide the
	starting point for the software design flow and serve as a basis
	for the communication between designers and stakeholders. In this
	agile software development technique, acceptance tests are written
	in natural language in order to ensure a common understanding between
	all members of the project. As a consequence, mapping the sentences
	to actual source code is the first step of the design flow, which
	is usually done manually.
	
	However, the scenarios described by the acceptance tests provide enough
	information in order to automatize the extraction of both the structure
	of the implementation and the test cases. In this work, we propose
	an assisted flow for BDD where the user enters into a dialog with
	the computer which suggests code pieces extracted from the sentences.
	For this purpose, natural language processing techniques are exploited.
	This allows for a semi-automatic transformation from acceptance tests
	to source code stubs and thus provides a first step towards an automatization
	of BDD.},
  acmid = {2367007},
  db = {acm2},
  doi = {10.1007/978-3-642-30561-0_19},
  isbn = {978-3-642-30560-3},
  location = {Prague, Czech Republic},
  numpages = {19},
  url = {http://dx.doi.org/10.1007/978-3-642-30561-0_19}
}

@INPROCEEDINGS{Soundararajan:2012:UTA:2157136.2157228,
  author = {Soundararajan, Shvetha and Chigani, Amine and Arthur, James D.},
  title = {Understanding the tenets of agile software engineering: lecturing,
	exploration and critical thinking},
  booktitle = {Proceedings of the 43rd ACM technical symposium on Computer Science
	Education},
  year = {2012},
  series = {SIGCSE '12},
  pages = {313--318},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {The use of agile principles and practices in software development
	is becoming a powerful force in today's workplace. In our quest to
	develop better products, therefore, it is imperative that we strive
	to learn and understand the application of agile methods, principles
	and techniques to the software development enterprise. Unfortunately,
	in many educational institutions, courses and projects that emphasize
	agile software development are minimal. At best, students have only
	limited exposure to the agile philosophy, principles and practices
	at the graduate and undergraduate levels of education. In an effort
	to address this concern, we offered an advanced graduate-level course
	entitled "Agile Software Engineering" in the Department of Computer
	Science at Virginia Tech. The primary objectives of the course were
	to introduce the values, principles and practices underlying the
	agile philosophy, and to do so in an atmosphere that encour-ages
	debate and critical thinking. The course was designed around three
	central components: (1) teaching the essentials of how one develops
	a product within an agile framework, (2) having invited talks by
	notable industry experts, and (3) having students present and discuss
	current agile research topics and issues. This paper describes our
	experiences during the offering of that course, and in particular,
	the unique perspectives of the class instructor, the teaching assistant
	and a student who was enrolled in the course.},
  acmid = {2157228},
  db = {acm2},
  doi = {10.1145/2157136.2157228},
  isbn = {978-1-4503-1098-7},
  keywords = {agile applicability, agile instruction and education, agile software
	development, exploring agile tenets, pedagogy, software engineering
	education},
  location = {Raleigh, North Carolina, USA},
  numpages = {6},
  url = {http://doi.acm.org/10.1145/2157136.2157228}
}

@INPROCEEDINGS{Trimble:2013:DMC:2468356.2468777,
  author = {Trimble, Jay and Dayton, Tom and Crocker, Alan},
  title = {The democratization of mission control: empowering users},
  booktitle = {CHI '13 Extended Abstracts on Human Factors in Computing Systems},
  year = {2013},
  series = {CHI EA '13},
  pages = {2381--2382},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {In 2002, at the Jet Propulsion Laboratory, during observations of
	space operations teams preparing for the 2003 Mars Exploration Rover
	Missions, the User Centered Technology Group from NASA Ames Research
	Center observed users coping with software interoperability issues.
	The packaging of software in multiple applications, each with its
	own pre-determined set of compartmentalized functions, forced users
	into the role of software integrators.
	
	In 2008 the Mission Control Technologies (MCT) project sought to address
	these issues by replacing multiple NASA Mission Control applications
	with composable user-objects. The primary stakeholders were NASA
	flight controllers and mission operations management.
	
	The feature that sold mission management on the project was that user
	objects modeled their real world counterparts. Once a user object
	was created, say for Space Station telemetry, that object could be
	reused. This meant that the association between a user object and
	it's data needed to happen once, as opposed to previous software
	systems, which required data to be associated with on screen displays
	each time a new display was built.
	
	While we sought to design and develop a new system, it was important
	to realize that the existing software was working, that users were
	familiar with that software from years of use, and the introduction
	of change was potentially disruptive to users.
	
	At the request of our customer, the initial MCT user objects would
	be for telemetry and monitoring of the Space Station. To design the
	software, we used participatory design (PD), in which the users are
	the domain experts and the designers facilitate the sessions. In
	addition to creating the artifacts that the team needed to build
	design specifications, the PD sessions forged bonds between the teams.
	For the users, the PD sessions were often the first time that they
	created explicit representations of their work.
	
	The team used agile development methods. Deliveries to the customer
	were made every three weeks, with a release every twelve weeks. A
	nightly build was available for download. A strategic road map guided
	priorities for design and development.
	
	The agile development cycle resulted in a multi-front set of engagements
	for the user experience team. The nightly build allowed the customer
	to provide daily feedback on features. The strategic road map guided
	priorities for the PD sessions. PD sessions typically lasted for
	several days and were planned. Daily feedback from nightly builds
	was often spontaneous.
	
	While participatory design was the core enabler for the developers
	and the customers to come together to create designs for which all
	felt a sense of ownership, agile development was the enabler that
	pushed the design specs into the world of real code and a working
	product. The constant availability of our product made our progress
	visible to all. This pushed everyone on the team to constantly improve
	it.},
  acmid = {2468777},
  db = {acm2},
  doi = {10.1145/2468356.2468777},
  isbn = {978-1-4503-1952-2},
  keywords = {agile ux, object oriented gui style, participatory design, user experience,
	ux management practice},
  location = {Paris, France},
  numpages = {2},
  url = {http://doi.acm.org/10.1145/2468356.2468777}
}

@INPROCEEDINGS{Wallace:2012:SAC:2157136.2157142,
  author = {Wallace, Charles and Mohan, Sriram and Troy, Douglas and Hoffman,
	Mark E.},
  title = {Scrum across the CS/SE curricula: a retrospective},
  booktitle = {Proceedings of the 43rd ACM technical symposium on Computer Science
	Education},
  year = {2012},
  series = {SIGCSE '12},
  pages = {5--6},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Scrum is one of the many agile approaches to software development
	that have been widely adopted over the past decade. Agile processes
	allow developers to embrace under-defined problems in complex environments
	where change in requirements is inevitable. The key agile features
	of Scrum are a flexible, adaptive schedule; democratic, collaborative
	teams; and frequent, iterative project and process reviews [2]. While
	students may engage with Scrum in the context of software development,
	the characteristics that suit many software problems to an agile
	approach also describe the student learning environment: complexity
	(new and unfamiliar concepts), under-defined problem space (students
	don't know what they don't know), short timeframe with frequent meetings
	(terms and class meetings), and inevitable change (apply new knowledge).
	This makes Scrum not only a software development strategy but a general
	learning strategy. Scrum facilitates frequent and iterative practice
	with timely feedback, development of mastery, and self-direction
	[1]. In this panel, the participants will describe how their students
	learn and practice Scrum in a software development context, how they
	use it to manage student projects outside the software development
	context, and how Scrum provides opportunities to integrate communication
	skills into the Computer Science (CS) and Software Engineering (SE)
	curricula. As participants in the NSF-funded CPATH II project (NSF
	Grants 0939122 and 0939081) "Incorporating Communication Skills Throughout
	Computer Science and Software Engineering Curricula," each panelist
	has developed Scrum-based assignments that exercise the skills of
	reading, writing, speaking, and teaming. The participants will discuss
	the design of these assignments and their experiences with them to
	date.},
  acmid = {2157142},
  db = {acm2},
  doi = {10.1145/2157136.2157142},
  isbn = {978-1-4503-1098-7},
  keywords = {communication skills, curriculum, scrum, software development},
  location = {Raleigh, North Carolina, USA},
  numpages = {2},
  url = {http://doi.acm.org/10.1145/2157136.2157142}
}

@ARTICLE{Werner:2012:USQ:2167431.2167456,
  author = {Werner, Linda and Arcamone, Dominic and Ross, Ben},
  title = {Using Scrum in a quarter-length undergraduate software engineering
	course},
  journal = {J. Comput. Sci. Coll.},
  year = {2012},
  volume = {27},
  pages = {140--150},
  number = {4},
  month = apr,
  abstract = {In this paper, we describe the use of Scrum in an upper-division software
	engineering quarter-length course. We describe tools used to support
	both the use of Scrum and the overall objectives of an introductory
	course in software engineering. We do this to provide support for
	others who want to teach an introductory software engineering course
	in a format suitable for a course shorter than the typical semester-length
	course.},
  acmid = {2167456},
  address = {USA},
  db = {acm2},
  issn = {1937-4771},
  issue_date = {April 2012},
  numpages = {11},
  publisher = {Consortium for Computing Sciences in Colleges},
  url = {http://dl.acm.org/citation.cfm?id=2167431.2167456}
}

@ARTICLE{Wilkes:2012:IBD:2424840.2424842,
  author = {Wilkes, Stephany},
  title = {Some impacts of "big data" on usability practice},
  journal = {Commun. Des. Q. Rev},
  year = {2012},
  volume = {13},
  pages = {25--32},
  number = {2},
  month = jun,
  abstract = {Two shifts in the technological landscape -- the era of "big data"
	and the popularity of Agile software development methodologies --
	have made users (and specifically data about them) central to the
	development process and broadened the definition of user-centered
	design and usability testing. This paper briefly describes the impact
	of these shifts on the usability practice. Rudimentary data types
	useful to usability practitioners are introduced, as well as helpful
	data tools and required skills. The paper concludes with a list of
	methodological and pedagogical gaps that should be addressed.},
  acmid = {2424842},
  address = {New York, NY, USA},
  db = {acm2},
  doi = {10.1145/2424840.2424842},
  issn = {2166-1200},
  issue_date = {June 2012},
  keywords = {ACM proceedings, SIGDOC},
  numpages = {8},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/2424840.2424842}
}

